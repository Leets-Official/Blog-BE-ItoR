# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: 릿츠 블로그 CI-CD 파이프라인

on:
  push:
    branches: [ "이도연/main" ,"이도연/6주차"]

jobs:
  #1. 개발 서버 CI, Build 용
  CI:
    runs-on: ubuntu-22.04
    permissions:
      contents: write
      checks: write
      pull-requests: write

    steps:
      # 1. repository checkout
      - uses: actions/checkout@v4

      # 2. jdk 환경 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. '*.yml' 파일 세팅
      - name: application.yml 파일 설정
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.APPLICATION_YML }}" > ./src/main/resources/application.yml

      # 4. gradle 환경 설치
      - name: Gradle Wrapper 권한 부여
        run: chmod +x gradlew

      # 4-1. 캐싱
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}

      - name: Gradle 빌드
        run: ./gradlew clean build

      # 6. JUnit 테스트 결과 게시
      - name: Test 결과 출력
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          junit_files: '**/build/test-results/test/TEST-*.xml'
          github_token: ${{ secrets.GITHUB_TOKEN }}

      #7. 도커 허브 로그인
      - name: Docker 로그인
        uses: docker/login-action@v3
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_ACCESS_TOKEN}}

      #8. 도커 이미지 Push
      - name: Docker 이미지 Push
        uses: docker/build-push-action@v5
        with:
          context: .
          dockerfile: Dockerfile
          push: true
          tags: ${{secrets.DOCKER_USERNAME}}/leets:latest

  CD:
    needs: CI
    runs-on: ubuntu-22.04

    steps:
      - name: 1. Checkout source code
        uses: actions/checkout@v3

      - name: env 생성
        run: echo "${{ secrets.ENV }}" > .env

      - name: 2. .env 파일 EC2에 전송
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: ".env"  # 방금 생성한 .env 파일
          target: "/home/ubuntu/app/docker/"

      - name: 3. docker-compose.yml 전달
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: "./docker/docker-compose.yml"
          target: "/home/ubuntu/app/"

      - name: 3. EC2에서 docker-compose 실행
        uses: appleboy/ssh-action@master  # SSH를 사용하여 EC2에서 명령 실행
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}  # EC2 퍼블릭 IP
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            # docker-compose 명령어 실행
            cd /home/ubuntu/app/docker/
            docker compose pull spring
            docker compose up -d spring

