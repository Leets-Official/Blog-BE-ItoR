# ──────────────────────────────────────────────────────────────────────────────
# 1) Test Reporting 사용을 위해 settings > Actions > General 에서
#    • Workflow permissions: Read and write
#    • Allow GitHub Actions to publish test results: Enabled
# ──────────────────────────────────────────────────────────────────────────────

permissions:
  contents: read      # 코드 체크아웃 등 filesystem 읽기
  checks: write       # Test Reporting 결과 업로드 권한

name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - 신은지/main
  workflow_dispatch:  # 수동 실행 버튼도 추가

jobs:
  CI:
    name: CI
    runs-on: ubuntu-latest
    outputs:
      test-results-dir: ${{ steps.set-path.outputs.dir }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 21

      - name: Build JAR
        run: ./gradlew clean bootJar --no-daemon

      - name: Run tests
        run: ./gradlew test --no-daemon

      - name: Expose test-results path
        id: set-path
        # set-output 대신 GITHUB_OUTPUT 사용
        run: echo "dir=build/test-results/test" >> $GITHUB_OUTPUT

  Test_Results:
    name: Test Results
    needs: CI
    runs-on: ubuntu-latest
    # 이 Job만 따로 permissions를 다시 지정해도 좋습니다.
    permissions:
      checks: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Upload JUnit report
        uses: actions/upload-test-report@v1
        with:
          # 와일드카드로 잡아서 모든 XML 리포트 업로드
          path: ${{ needs.CI.outputs.test-results-dir }}/*.xml
        if: always()

  CD:
    name: CD
    needs: [CI, Test_Results]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push Docker image
        run: |
          IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/blog-app:${{ github.sha }}
          sudo docker build -t $IMAGE .
          sudo docker push $IMAGE

      - name: Deploy to server
        run: |
          IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/blog-app:${{ github.sha }}
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            sudo docker pull $IMAGE
            if sudo docker ps -q -f name=blog-app; then
              sudo docker stop blog-app
              sudo docker rm   blog-app
            fi
            sudo docker run -d --name blog-app -p 8282:8282 $IMAGE
          EOF
        shell: bash
