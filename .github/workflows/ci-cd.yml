# ──────────────────────────────────────────────────────────────────────────────
#  사전: Settings → Actions → General 에서
#  • Workflow permissions: Read and write
#  • Allow GitHub Actions to publish test results: Enabled
# ──────────────────────────────────────────────────────────────────────────────

permissions:
  contents: read    # 코드 읽기
  checks: write     # Test Reporting 결과 업로드

name: 릿츠 블로그 CI/CD 파이프라인

on:
  push:
    branches: [ "신은지/main"]
  workflow_dispatch:

jobs:
  # 1. CI: 빌드 + 테스트 (JUnit XML 리포트 생성)
  CI:
    name: CI
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: application.yml 파일 설정
        run: |
          echo "▶ application.yml 샘플"
          sed -n '1,200p' src/main/resources/application.yml

      - name: Grant Gradle wrapper exec
        run: chmod +x gradlew

      - name: Cache Gradle deps
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*','**/gradle-wrapper.properties') }}
          restore-keys: gradle-${{ runner.os }}

      - name: Build with Gradle
        run: ./gradlew clean build --no-daemon

      - name: Run tests
        run: ./gradlew test --no-daemon

      - name: Expose test-results path
        id: set-path
        run: echo "dir=build/test-results/test" >> $GITHUB_OUTPUT

  # 2. Test Results: 업로드 & 요약 UI 표시
  Test_Results:
    name: Test Results
    needs: CI
    runs-on: ubuntu-22.04
    permissions:
      contents: read    # checkout 권한
      checks: write     # 체크런 생성 권한
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Upload JUnit report
        uses: actions/upload-test-report@v1
        with:
          path: ${{ needs.CI.outputs.test-results-dir }}/*.xml
        if: always()

  # 3. Build & Push Docker Image
  Build_and_Push:
    name: Build & Push Docker Image
    needs: [CI, Test_Results]
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Docker Hub login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

      - name: Build & push
        uses: docker/build-push-action@v5
        with:
          context: .
          dockerfile: Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/leets:latest

  # 4. Deploy to EC2 via SCP + SSH
  Deploy:
    name: Deploy to EC2
    needs: Build_and_Push
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env
        run: echo "${{ secrets.ENV }}" > .env

      - name: Copy .env to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: ".env"
          target: "/home/ubuntu/app/docker/"

      - name: Copy docker-compose.yml to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: "./docker/docker-compose.yml"
          target: "/home/ubuntu/app/"

      - name: Run docker-compose on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            cd /home/ubuntu/app/docker/
            docker compose pull spring
            docker compose up -d spring
