# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: 릿츠 블로그 테스트 CI 파이프라인

### develop으로 PR 올릴 때, 테스트 코드를 실행하여, 체크하는 로직을 수행한다.

on:
  pull_request:
    branches: ["이도연/main","이도연/6주차"]

jobs:
  #1. Test 용
  test:

    runs-on: ubuntu-22.04
    permissions:
      contents: write
      checks: write
      pull-requests: write

    steps:
      # 1-1. repository checkout
      - uses: actions/checkout@v4

      # 1-2. jdk 환경 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. '*.yml' 파일 세팅
      - name: application.yml 파일 설정
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.APPLICATION_YML }}" > ./src/main/resources/application.yml

      # 1-4. gradle 환경 설치
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

      # 1-5. 빌드
      - name: Build with Gradle Wrapper
        run: ./gradlew build

      # 7. JUnit 테스트 결과 게시
      - name: Test 결과 출력
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          junit_files: '**/build/test-results/test/TEST-*.xml'
          github_token: ${{ secrets.GITHUB_TOKEN }}

